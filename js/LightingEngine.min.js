/*The MIT License (MIT)

Copyright (c) 2014 Cory Beams

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.*/

function scale(e,t){var n={x:t.x*e,y:t.y*e};return n}function Light(e,t,n,r,i,s,o,u,a,f){this.location={x:e,y:t},this.rotation=n,this.angleRange=f,this.radius=a,this.type=r,this.bufferIndex,this.red=i,this.green=s,this.blue=o,this.intensity=u,this.extendedLightMode=false,this.lightIsOnAPolygon=false,this.polygonIndex,this.setPosition=function(e,t){if(this.location.x!=e||this.location.y!=t){this.location.x=e;this.location.y=t}},this.setRotation=function(e){this.rotation=e},this.setRadius=function(e){if(this.type=="point"||this.type=="directional"){console.log("Note: Setting the radius of a point or directional light will not affect it.")}else{this.radius=e}},this.setColour=function(e,t,n){this.red=e;this.green=t;this.blue=n},this.setIntensity=function(e){this.intensity=e},this.setExtendedLightMode=function(e){this.extendedLightMode=e}}function Polygon(e,t,n,r,i,s,o){this.x=e,this.y=t,this.rotation=0,this.rotationPoint={x:0,y:0},this.faceSize=n,this.vertices=r,this.shadowVertices=i,this.colour=o,this.bufferIndex,this.textureURL=s,this.textureIndex,this.rotationCalc=false,this.dontRender=false,this.getVertices=function(){return this.shadowVertices},this.setPosition=function(e,t){if(this.x!=e||this.y!=t){this.x=e;this.y=t;this.rotationCalc=true}},this.setRotation=function(e){if(this.rotation!=e){this.rotation=e;this.rotationCalc=true}},this.setRotationPoint=function(e,t){this.rotationPoint={x:e,y:t};this.rotationCalc=true};this.calculateRotation=function(){var e=degToRad(this.rotation);for(var t=0;t<i.length;t++){var n=this.x+this.vertices[t].x;var r=this.y+this.vertices[t].y;var s=this.rotationPoint.x;var o=this.rotationPoint.y;var u=Math.cos(e)*(n-s)-Math.sin(e)*(r-o)+s;var a=Math.sin(e)*(n-s)+Math.cos(e)*(r-o)+o;this.shadowVertices[t].x=u;this.shadowVertices[t].y=a}this.rotationCalc=false}}function LightingEngine(e){this.gl,this.canvas=e,this.mvMatrix=mat4.create(),this.pMatrix=mat4.create(),this.mvMatrixStack=[],this.xOffset=0,this.yOffset=0,this.currentProgram,this.shaderProgram,this.shaderProgram2,this.spotLightShaderProgram,this.textureShaderProgram,this.foreground=[],this.background=[],this.ambientLight={r:255,g:255,b:255,a:255},this.lights=[],this.lightColour={r:255,g:255,b:255},this.lightIntensity=40,this.colourSpectrum=[],this.colourIndex=0,this.objectBuffers=[],this.objectColourBuffers=[],this.objectTextureBuffers=[],this.lightBuffers=[],this.shadowBuffers=[],this.shadowColourBuffers=[],this.textures=[],this.time=(new Date).getTime(),this.fpsCount=0,this.fps=0,this.logFPS=false,this.initialized=false,this.foregroundBlending=false,this.convertCallsPerFrame=0,this.init=function(){this.initGL();this.initShaders();this.initBuffers();this.initTextures();this.prepareGL();this.initialized=true},this.initGL=function(){try{this.gl=this.canvas.getContext("webgl",{stencil:true});this.gl.viewportWidth=e.width;this.gl.viewportHeight=e.height;this.gl.viewportRatio=e.width/e.height}catch(t){}if(!this.gl){alert("Could not initialise WebGL, sorry :-( ")}},this.initShaders=function(){var e=this.getShaderFromVar(this.gl,pointLightFragShader,"Frag");var t=this.getShaderFromVar(this.gl,mainVertShader,"Vert");var n=this.getShaderFromVar(this.gl,spotLightFragShader,"Frag");var r=this.getShaderFromVar(this.gl,colourFragShader,"Frag");var i=this.getShaderFromVar(this.gl,textureFragShader,"Frag");var s=this.getShaderFromVar(this.gl,textureVertShader,"Vert");this.shaderProgram=this.createShader(this.shaderProgram,false,t,e);this.shaderProgram2=this.createShader(this.shaderProgram2,false,t,r);this.spotLightShaderProgram=this.createShader(this.spotLightShaderProgram,false,t,n);this.textureShaderProgram=this.createShader(this.textureShaderProgram,true,s,i);this.setCurrentShaderProgram(this.shaderProgram)},this.initBuffers=function(){for(var e=0;e<this.foreground.length;e++){this.initPolygonBuffer(this.foreground,e)}for(var t=0;t<this.background.length;t++){this.initPolygonBuffer(this.background,t)}this.shadowColourBuffers[0]=this.gl.createBuffer();this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.shadowColourBuffers[0]);colors=[];for(var n=0;n<1e4;n++){colors=colors.concat([1,1,1,.5])}this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(colors),this.gl.STATIC_DRAW);this.shadowColourBuffers[0].itemSize=4;this.shadowColourBuffers[0].numItems=1e4;this.shadowBuffers[0]=this.gl.createBuffer();for(var r=0;r<this.lights.length;r++){this.initLightBuffer(this.lights,r)}},this.initPolygonBuffer=function(e,t){for(var n=t;n>=0;n--){if(e[t]!=e[n]&&e[t].vertices.length==e[n].vertices.length&&e[t].faceSize==e[n].faceSize&&e[t].colour.r==e[n].colour.r&&e[t].colour.g==e[n].colour.g&&e[t].colour.b==e[n].colour.b&&e[t].colour.a==e[n].colour.a){e[t].bufferIndex=e[n].bufferIndex}else if(n==0){e[t].bufferIndex=this.objectBuffers.length;this.objectBuffers[this.objectBuffers.length]=this.gl.createBuffer();this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.objectBuffers[e[t].bufferIndex]);var r=[];if(e[t].textureURL!=null){r=[this.convertToMatrix(e[t].faceSize,true),this.convertToMatrix(e[t].faceSize,false),0,0,this.convertToMatrix(e[t].faceSize,false),0,this.convertToMatrix(e[t].faceSize,true),0,0,0,0,0];this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(r),this.gl.STATIC_DRAW)}else{for(var i=0;i<e[t].vertices.length;i++){r.push(this.convertToMatrix(e[t].vertices[i].x,true),this.convertToMatrix(e[t].vertices[i].y,false),0);if(i%3==1){r.push(0,0,0)}}var s=[7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52];for(var o=0;o<s.length;o++){if(e[t].vertices.length==s[o]){r.push(0,0,0);break}}r.push(this.convertToMatrix(e[t].vertices[0].x,true));r.push(this.convertToMatrix(e[t].vertices[0].y,false));r.push(0);this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(r),this.gl.STATIC_DRAW)}this.objectBuffers[e[t].bufferIndex].itemSize=3;this.objectBuffers[e[t].bufferIndex].numItems=r.length/3;if(e[t].textureURL==null){this.objectColourBuffers[e[t].bufferIndex]=this.gl.createBuffer();this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.objectColourBuffers[e[t].bufferIndex]);colors=[];for(var u=0;u<r.length;u++){colors=colors.concat([e[t].colour.r/255,e[t].colour.g/255,e[t].colour.b/255,e[t].colour.a/255])}this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(colors),this.gl.STATIC_DRAW);this.objectColourBuffers[e[t].bufferIndex].itemSize=4;this.objectColourBuffers[e[t].bufferIndex].numItems=r.length/3}else{this.objectTextureBuffers[e[t].bufferIndex]=this.gl.createBuffer();this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.objectTextureBuffers[e[t].bufferIndex]);var a=[1,1,0,1,1,0,0,0];this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(a),this.gl.STATIC_DRAW);this.objectTextureBuffers[e[t].bufferIndex].itemSize=2;this.objectTextureBuffers[e[t].bufferIndex].numItems=4}}}},this.initTextures=function(){for(var e=0;e<this.foreground.length;e++){if(this.foreground[e].textureURL!=null){this.assignTextureIndices(this.foreground,e)}}for(var t=0;t<this.background.length;t++){if(this.background[t].textureURL!=null){this.assignTextureIndices(this.background,t)}}},this.assignTextureIndices=function(e,t){var n=this;var r=true;for(var i=0;i<this.textures.length;i++){var s=this.gl.createTexture();s.image=new Image;s.image.src=e[t].textureURL;if(s.image.src==this.textures[i].image.src){e[t].textureIndex=i;r=false;break}}if(r==true){var o=this.gl.createTexture();this.textures.push(o);this.textures[this.textures.length-1].image=new Image;this.textures[this.textures.length-1].image.onload=function(){for(var e=0;e<n.textures.length;e++){if(n.textures[e].hasLoaded==false){n.handleLoadedTexture(n.textures[e]);break}}};this.textures[this.textures.length-1].image.src=e[t].textureURL;this.textures[this.textures.length-1].hasLoaded=false;e[t].textureIndex=this.textures.length-1}},this.handleLoadedTexture=function(e){this.gl.bindTexture(this.gl.TEXTURE_2D,e);this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,true);this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,this.gl.RGBA,this.gl.UNSIGNED_BYTE,e.image);this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST);this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST);this.gl.generateMipmap(this.gl.TEXTURE_2D);this.gl.bindTexture(this.gl.TEXTURE_2D,null);e.hasLoaded=true},this.initLightBuffer=function(e,t){for(var n=t;n>=0;n--){if(e[t]!=e[n]&&e[t].type==e[n].type){e[t].bufferIndex=e[n].bufferIndex}else if(n==0){e[t].bufferIndex=this.lightBuffers.length;this.lightBuffers[this.lightBuffers.length]=this.gl.createBuffer();this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.lightBuffers[e[t].bufferIndex]);if(e[t].type=="point"||e[t].type=="spot"){vertices=[this.convertToMatrix(this.gl.viewportWidth,true),this.convertToMatrix(this.gl.viewportHeight,false),0,this.convertToMatrix(-this.gl.viewportWidth,true),this.convertToMatrix(this.gl.viewportHeight,false),0,this.convertToMatrix(this.gl.viewportWidth,true),this.convertToMatrix(-this.gl.viewportHeight,false),0,this.convertToMatrix(-this.gl.viewportWidth,true),this.convertToMatrix(-this.gl.viewportHeight,false),0];this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(vertices),this.gl.DYNAMIC_DRAW);this.lightBuffers[e[t].bufferIndex].itemSize=3;this.lightBuffers[e[t].bufferIndex].numItems=4}else if(e[t].type=="directional"){var r=e[t].angleRange;var i=degToRad(r/2);var s=2e5;var o=Math.round(0+s*Math.cos(i));var u=Math.round(0+s*Math.sin(i));i=degToRad(-r/2);var a=Math.round(0+s*Math.cos(i));var f=Math.round(0+s*Math.sin(i));vertices=[0,0,0,this.convertToMatrix(o,true),this.convertToMatrix(u,false),0,this.convertToMatrix(a,true),this.convertToMatrix(f,false),0];this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(vertices),this.gl.DYNAMIC_DRAW);this.lightBuffers[e[t].bufferIndex].itemSize=3;this.lightBuffers[e[t].bufferIndex].numItems=3}}}},this.prepareGL=function(){this.gl.clearColor(0,0,0,1);this.gl.viewport(0,0,this.gl.viewportWidth,this.gl.viewportHeight);mat4.ortho(this.pMatrix,-this.gl.viewportRatio,this.gl.viewportRatio,-1,1,.1,100);mat4.identity(this.mvMatrix);mat4.translate(this.mvMatrix,this.mvMatrix,[-this.gl.viewportRatio,-1,-1]);this.gl.enable(this.gl.DEPTH_TEST);this.gl.enable(this.gl.STENCIL_TEST)},this.setClearColour=function(e,t,n,r){this.gl.clearColor(e/255,t/255,n/255,r/255)},this.setMatrixUniforms=function(e){this.gl.uniformMatrix4fv(e.pMatrixUniform,false,this.pMatrix);this.gl.uniformMatrix4fv(e.mvMatrixUniform,false,this.mvMatrix)},this.update=function(){this.fpsCount++;if((new Date).getTime()>this.time+1e3){this.time+=1e3;this.fps=this.fpsCount;this.fpsCount=0;if(this.logFPS==true){console.log("FPS: "+this.fps);console.log("----------------")}if(false){console.log("No. Lights: "+this.lights.length);console.log("No. converts: "+this.convertCallsPerFrame);console.log("No. Foreground: "+this.foreground.length);console.log("No. Background: "+this.background.length);console.log("----------------")}}this.convertCallsPerFrame=0;for(var e=0;e<this.lights.length;e++){if(this.lights[e].extendedLightMode==false){for(var t=0;t<this.foreground.length;t++){var n=this.foreground[t].shadowVertices.length;var r=[];var i=[];for(var s=0;s<n;s++){r.push(this.foreground[t].shadowVertices[s].x);i.push(this.foreground[t].shadowVertices[s].y)}var o=this.lights[e].location.x;var u=this.lights[e].location.y;var a=polygonCollision(n,r,i,o,u);if(a==true){this.lights[e].lightIsOnAPolygon=true;this.lights[e].polygonIndex=t;break}else{this.lights[e].lightIsOnAPolygon=false;this.lights[e].polygonIndex=null}}}else{this.lights[e].lightIsOnAPolygon=false}}for(var t=0;t<this.foreground.length;t++){if(this.foreground[t].rotationCalc==true){this.foreground[t].calculateRotation()}}for(var f=0;f<this.background.length;f++){if(this.background[f].rotationCalc==true){this.background[f].calculateRotation()}}},this.render=function(){this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT);mat4.translate(this.mvMatrix,this.mvMatrix,[this.convertToMatrix(-this.xOffset,true),this.convertToMatrix(-this.yOffset,false),0]);for(var e=0;e<this.background.length;e++){if(checkScreenBounds(this.xOffset-this.background[e].faceSize*this.background[e].vertices.length,this.yOffset-this.background[e].faceSize*this.background[e].vertices.length,this.gl.viewportWidth+this.background[e].faceSize*this.background[e].vertices.length,this.gl.viewportHeight+this.background[e].faceSize*this.background[e].vertices.length,this.background[e].x,this.background[e].y)){this.renderObject(this.background,e)}}this.gl.bindTexture(this.gl.TEXTURE_2D,null);for(var t=0;t<this.foreground.length;t++){if(checkScreenBounds(this.xOffset-this.foreground[t].faceSize*this.foreground[t].vertices.length,this.yOffset-this.foreground[t].faceSize*this.foreground[t].vertices.length,this.gl.viewportWidth+this.foreground[t].faceSize*this.foreground[t].vertices.length,this.gl.viewportHeight+this.foreground[t].faceSize*this.foreground[t].vertices.length,this.foreground[t].x,this.foreground[t].y)){this.renderObject(this.foreground,t)}}this.gl.bindTexture(this.gl.TEXTURE_2D,null);this.setCurrentShaderProgram(this.shaderProgram);this.gl.enable(this.gl.STENCIL_TEST);this.gl.depthMask(false);for(var n=0;n<this.lights.length;n++){var r=[];this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.REPLACE);this.gl.stencilFunc(this.gl.ALWAYS,1,1);this.gl.colorMask(false,false,false,false);var i=0;if(this.lights[n].polygonIndex!=null){i=this.lights[n].polygonIndex}for(var t=i;t<this.foreground.length;t++){if(t>i&&this.lights[n].polygonIndex!=null){break}if(this.foreground[t].dontRender==false){var s,o,u,a,f;if(this.lights[n].type=="spot"){s=this.lights[n].radius;o=1;u=this.lights[n].location.x-(this.foreground[t].x+this.foreground[t].faceSize/2);u=u*u;a=this.lights[n].location.y-(this.foreground[t].y+this.foreground[t].faceSize/2);a=a*a;f=Math.sqrt(u+a)}else{s=1;o=1;f=1}if(s+o>f){var l=this.foreground[t].getVertices();for(var c=0;c<l.length;c++){var h=l[c];var p=l[(c+1)%l.length];var d=Vector2f.sub(p,h);var v={x:d.y,y:-d.x};if(this.lights[n].extendedLightMode==false){if(this.lights[n].lightIsOnAPolygon==true){v.x=-d.y;v.y=d.x}else{v.x=d.y;v.y=-d.x}}var m=Vector2f.sub(h,this.lights[n].location);if(Vector2f.dot(v,m)>0){var g=Vector2f.add(h,scale(500,Vector2f.sub(h,this.lights[n].location)));var y=Vector2f.add(p,scale(500,Vector2f.sub(p,this.lights[n].location)));r.push(g.x/this.gl.viewportWidth*this.gl.viewportRatio*2,g.y/this.gl.viewportHeight*2,0,h.x/this.gl.viewportWidth*this.gl.viewportRatio*2,h.y/this.gl.viewportHeight*2,0,y.x/this.gl.viewportWidth*this.gl.viewportRatio*2,y.y/this.gl.viewportHeight*2,0,h.x/this.gl.viewportWidth*this.gl.viewportRatio*2,h.y/this.gl.viewportHeight*2,0,y.x/this.gl.viewportWidth*this.gl.viewportRatio*2,y.y/this.gl.viewportHeight*2,0,p.x/this.gl.viewportWidth*this.gl.viewportRatio*2,p.y/this.gl.viewportHeight*2,0)}}}}}this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.shadowBuffers[0]);this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(r),this.gl.DYNAMIC_DRAW);this.shadowBuffers[0].itemSize=3;this.shadowBuffers[0].numItems=r.length/3;this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.shadowBuffers[0]);this.gl.vertexAttribPointer(this.currentProgram.vertexPositionAttribute,this.shadowBuffers[0].itemSize,this.gl.FLOAT,false,0,0);this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.shadowColourBuffers[0]);this.gl.vertexAttribPointer(this.currentProgram.vertexColorAttribute,this.shadowColourBuffers[0].itemSize,this.gl.FLOAT,false,0,0);this.setMatrixUniforms(this.currentProgram);this.gl.drawArrays(this.gl.TRIANGLES,0,this.shadowBuffers[0].numItems);this.gl.colorMask(true,true,true,true);this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);this.gl.stencilFunc(this.gl.EQUAL,0,1);if(this.lights[n].type=="point"||this.lights[n].type=="directional"){this.setCurrentShaderProgram(this.shaderProgram)}else if(this.lights[n].type=="spot"){this.setCurrentShaderProgram(this.spotLightShaderProgram)}this.gl.enable(this.gl.BLEND);this.gl.blendFunc(this.gl.ONE,this.gl.ONE);this.gl.uniform2f(this.gl.getUniformLocation(this.currentProgram,"lightLocation"),this.lights[n].location.x,this.lights[n].location.y);this.gl.uniform3f(this.gl.getUniformLocation(this.currentProgram,"lightColor"),this.lights[n].red/this.lights[n].intensity,this.lights[n].green/this.lights[n].intensity,this.lights[n].blue/this.lights[n].intensity);if(this.lights[n].radius!=null){this.gl.uniform1f(this.gl.getUniformLocation(this.currentProgram,"radius"),this.lights[n].radius)}this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.lightBuffers[this.lights[n].bufferIndex]);this.gl.vertexAttribPointer(this.currentProgram.vertexPositionAttribute,this.lightBuffers[this.lights[n].bufferIndex].itemSize,this.gl.FLOAT,false,0,0);var b=this.convertVertToMatrix(this.lights[n].location.x,this.lights[n].location.y);mat4.translate(this.mvMatrix,this.mvMatrix,[b.x,b.y,0]);this.mvPushMatrix();mat4.rotate(this.mvMatrix,this.mvMatrix,degToRad(this.lights[n].rotation),[0,0,1]);this.setMatrixUniforms(this.currentProgram);this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,this.lightBuffers[this.lights[n].bufferIndex].numItems);this.mvPopMatrix();mat4.translate(this.mvMatrix,this.mvMatrix,[-b.x,-b.y,0]);this.gl.disable(this.gl.BLEND);this.gl.clear(this.gl.STENCIL_BUFFER_BIT)}if(this.foregroundBlending==true){for(var n=0;n<this.lights.length;n++){if(this.lights[n].type=="point"||this.lights[n].type=="directional"){this.setCurrentShaderProgram(this.shaderProgram)}else if(this.lights[n].type=="spot"){this.setCurrentShaderProgram(this.spotLightShaderProgram)}this.gl.uniform2f(this.gl.getUniformLocation(this.currentProgram,"lightLocation"),this.lights[n].location.x,this.lights[n].location.y);this.gl.uniform3f(this.gl.getUniformLocation(this.currentProgram,"lightColor"),this.lights[n].red/this.lights[n].intensity,this.lights[n].green/this.lights[n].intensity,this.lights[n].blue/this.lights[n].intensity);if(this.lights[n].radius!=null){this.gl.uniform1f(this.gl.getUniformLocation(this.currentProgram,"radius"),this.lights[n].radius)}this.gl.enable(this.gl.BLEND);this.gl.blendFunc(this.gl.ONE,this.gl.ONE);this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.lightBuffers[this.lights[n].bufferIndex]);this.gl.vertexAttribPointer(this.currentProgram.vertexPositionAttribute,this.lightBuffers[this.lights[n].bufferIndex].itemSize,this.gl.FLOAT,false,0,0);var b=this.convertVertToMatrix(this.lights[n].location.x,this.lights[n].location.y);mat4.translate(this.mvMatrix,this.mvMatrix,[b.x,b.y,0]);this.mvPushMatrix();mat4.rotate(this.mvMatrix,this.mvMatrix,degToRad(this.lights[n].rotation),[0,0,1]);this.setMatrixUniforms(this.currentProgram);this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,this.lightBuffers[this.lights[n].bufferIndex].numItems);this.mvPopMatrix();mat4.translate(this.mvMatrix,this.mvMatrix,[-b.x,-b.y,0])}this.gl.disable(this.gl.BLEND)}mat4.translate(this.mvMatrix,this.mvMatrix,[this.convertToMatrix(this.xOffset,true),this.convertToMatrix(this.yOffset,false),0])},this.renderObject=function(e,t){if(e[t].dontRender==false){this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.objectBuffers[e[t].bufferIndex]);this.gl.vertexAttribPointer(this.currentProgram.vertexPositionAttribute,this.objectBuffers[e[t].bufferIndex].itemSize,this.gl.FLOAT,false,0,0);if(e[t].textureURL==null){this.setCurrentShaderProgram(this.shaderProgram2);this.gl.uniform4f(this.gl.getUniformLocation(this.currentProgram,"ambientLight"),this.ambientLight.r/255,this.ambientLight.g/255,this.ambientLight.b/255,this.ambientLight.a/255);this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.objectColourBuffers[e[t].bufferIndex]);this.gl.vertexAttribPointer(this.shaderProgram.vertexColorAttribute,this.objectColourBuffers[e[t].bufferIndex].itemSize,this.gl.FLOAT,false,0,0);var n=this.convertVertToMatrix(e[t].x,e[t].y);mat4.translate(this.mvMatrix,this.mvMatrix,[n.x,n.y,0]);this.mvPushMatrix();mat4.rotate(this.mvMatrix,this.mvMatrix,degToRad(e[t].rotation),[0,0,1]);this.setMatrixUniforms(this.shaderProgram2)}else{this.gl.blendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA);this.gl.enable(this.gl.BLEND);this.setCurrentShaderProgram(this.textureShaderProgram);this.gl.uniform4f(this.gl.getUniformLocation(this.currentProgram,"ambientLight"),this.ambientLight.r/255,this.ambientLight.g/255,this.ambientLight.b/255,this.ambientLight.a/255);this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.objectTextureBuffers[e[t].bufferIndex]);this.gl.vertexAttribPointer(this.currentProgram.textureCoordAttribute,this.objectTextureBuffers[e[t].bufferIndex].itemSize,this.gl.FLOAT,false,0,0);this.gl.activeTexture(this.gl.TEXTURE0);this.gl.bindTexture(this.gl.TEXTURE_2D,this.textures[e[t].textureIndex]);this.gl.uniform1i(this.textureShaderProgram.samplerUniform,0);var n=this.convertVertToMatrix(e[t].x,e[t].y);var r=this.convertToMatrix(e[t].rotationPoint.x-e[t].x,true);var i=this.convertToMatrix(e[t].rotationPoint.y-e[t].y,false);mat4.translate(this.mvMatrix,this.mvMatrix,[n.x,n.y,0]);this.mvPushMatrix();mat4.translate(this.mvMatrix,this.mvMatrix,[r,i,0]);mat4.rotate(this.mvMatrix,this.mvMatrix,degToRad(e[t].rotation),[0,0,1]);mat4.translate(this.mvMatrix,this.mvMatrix,[-r,-i,0]);this.setMatrixUniforms(this.textureShaderProgram)}this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,this.objectBuffers[e[t].bufferIndex].numItems);this.mvPopMatrix();mat4.translate(this.mvMatrix,this.mvMatrix,[-n.x,-n.y,0]);this.gl.disable(this.gl.BLEND)}},this.setCurrentShaderProgram=function(e){this.gl.useProgram(e);this.currentProgram=e},this.moveCamera=function(e,t){this.xOffset=e;this.yOffset=t},this.createPolygon=function(e,t,n,r,i,s){if(n<3){console.log("Error: To create a polygon it must have at least 3 vertices!")}else if(n>52){console.log("Error: Currently only support polygons with up to 52 vertices.")}else{var o=[];for(var u=0;u<n;u++){o.push({x:Math.sin(u/n*2*Math.PI)*r,y:Math.cos(u/n*2*Math.PI)*r})}var a=[];for(var u=0;u<n;u++){a.push({x:Math.sin(u/n*2*Math.PI)*r+e,y:Math.cos(u/n*2*Math.PI)*r+t})}if(s==true){this.foreground.push(new Polygon(e,t,r,o,a,null,i))}else if(s==false){this.background.push(new Polygon(e,t,r,o,a,null,i))}if(this.initialized==true){if(s==true){this.initPolygonBuffer(this.foreground,this.foreground.length-1)}else if(s==false){this.initPolygonBuffer(this.background,this.background.length-1)}}}},this.createSquare=function(e,t,n,r,i){if(i==null){i=false}var s=[{x:0,y:0},{x:0,y:n},{x:n,y:n},{x:n,y:0}];var o=[{x:e,y:t},{x:e,y:n+t},{x:n+e,y:n+t},{x:n+e,y:t}];var u={r:null,g:null,b:null,a:null};if(i==true){this.foreground.push(new Polygon(e,t,n,s,o,r,u))}else if(i==false){this.background.push(new Polygon(e,t,n,s,o,r,u))}if(this.initialized==true){if(i==true){this.initPolygonBuffer(this.foreground,this.foreground.length-1);this.assignTextureIndices(this.foreground,this.foreground.length-1)}else{this.initPolygonBuffer(this.background,this.background.length-1);this.assignTextureIndices(this.background,this.background.length-1)}}},this.createCustomPolygon=function(e,t,n,r,i,s){if(s==null){s=false}var o=[];for(var u=0;u<r.length;u++){o.push({x:e+r[u].x,y:t+r[u].y})}if(s==true){this.foreground.push(new Polygon(e,t,n,r,o,i))}else if(s==false){this.background.push(new Polygon(e,t,n,r,o,i))}if(this.initialized==true){if(s==true){this.initPolygonBuffer(this.foreground,this.foreground.length-1);this.assignTextureIndices(this.foreground,this.foreground.length-1)}else{this.initPolygonBuffer(this.background,this.background.length-1);this.assignTextureIndices(this.background,this.background.length-1)}}};this.getForeground=function(e){if(e>=this.foreground.length){console.log("Error: Cannot get foreground object with index: "+e+". The maximum possible index is: "+(this.foreground.length-1))}else{return this.foreground[e]}},this.removeForeground=function(e){if(e>=this.foreground.length){console.log("Error: Cannot remove foreground object with index: "+e+". The maximum possible index is: "+(this.foreground.length-1))}else{this.foreground[e].dontRender=true}};this.getBackground=function(e){if(e>=this.background.length){console.log("Error: Cannot get background object with index: "+e+". The maximum possible index is: "+(this.background.length-1))}else{return this.background[e]}},this.setAmbientLight=function(e,t,n,r){this.ambientLight={r:e,g:t,b:n,a:r}},this.createPointLight=function(e,t){this.lights.push(new Light(e,t,0,"point",this.lightColour.r,this.lightColour.g,this.lightColour.b,this.lightIntensity));if(this.initialized==true){this.initLightBuffer(this.lights,this.lights.length-1)}},this.createSpotLight=function(e,t,n){this.lights.push(new Light(e,t,0,"spot",this.lightColour.r,this.lightColour.g,this.lightColour.b,this.lightIntensity,n));if(this.initialized==true){this.initLightBuffer(this.lights,this.lights.length-1)}},this.createDirectionalLight=function(e,t,n,r){this.lights.push(new Light(e,t,n,"directional",this.lightColour.r,this.lightColour.g,this.lightColour.b,this.lightIntensity,null,r));if(this.initialized==true){this.initLightBuffer(this.lights,this.lights.length-1)}},this.removeLight=function(e){if(e>=this.lights.length){console.log("Error: Cannot remove light with index: "+e+". The maximum possible index is: "+(this.lights.length-1))}else{this.lights.splice(e,1)}};this.getLight=function(e){if(e>=this.lights.length){console.log("Error: Cannot get light with index: "+e+". The maximum possible index is: "+(this.lights.length-1))}else{return this.lights[e]}},this.setLightColour=function(e,t,n){this.lightColour={r:e,g:t,b:n}},this.setLightIntensity=function(e){if(e<0){console.log("Error: Cannot set light intensity bellow '0'.")}else{this.lightIntensity=e}},this.setupColourSpectrum=function(){var e=255;var t=e;var n=0;var r=0;for(var n=0;n<=e;n++){this.colourSpectrum.push(colour={r:t,g:n,b:r})}for(var t=e;t>=0;t--){this.colourSpectrum.push(colour={r:t,g:n,b:r})}for(var r=0;r<=e;r++,n--){this.colourSpectrum.push(colour={r:t,g:n,b:r})}for(var i=0;i<=e;i++,r--,t++){this.colourSpectrum.push(colour={r:t,g:n,b:r})}},this.incrementColourSpectrum=function(e){if(e==null){this.colourIndex++}else{this.colourIndex+=e}if(this.colourIndex>this.colourSpectrum.length-1){this.colourIndex=0}this.setLightColour(this.colourSpectrum[this.colourIndex].r,this.colourSpectrum[this.colourIndex].g,this.colourSpectrum[this.colourIndex].b)},this.decrementColourSpectrum=function(e){if(e==null){this.colourIndex--}else{this.colourIndex-=e}if(this.colourIndex<0){this.colourIndex=this.colourSpectrum.length-1}this.setLightColour(this.colourSpectrum[this.colourIndex].r,this.colourSpectrum[this.colourIndex].g,this.colourSpectrum[this.colourIndex].b)},this.checkPointCollision=function(e,t,n){var r=n.shadowVertices.length;var i=[];var s=[];for(var o=0;o<r;o++){i.push(n.shadowVertices[o].x);s.push(n.shadowVertices[o].y)}var u=polygonCollision(r,i,s,e,t);if(u==true){return true}else{return false}},this.setForegroundBlending=function(e){this.foregroundBlending=e},this.logFps=function(e){this.logFPS=e},this.convertToMatrix=function(e,t){this.convertCallsPerFrame++;if(t==true){return e/this.gl.viewportWidth*this.gl.viewportRatio*2}else{return e/this.gl.viewportHeight*2}},this.convertVertToMatrix=function(e,t){this.convertCallsPerFrame++;return verts={x:e/this.gl.viewportWidth*this.gl.viewportRatio*2,y:t/this.gl.viewportHeight*2}},this.getShaderFromHTML=function(e,t){var n=document.getElementById(t);if(!n){return null}var r="";var i=n.firstChild;while(i){if(i.nodeType==3)r+=i.textContent;i=i.nextSibling}var s;if(n.type=="x-shader/x-fragment"){s=this.gl.createShader(this.gl.FRAGMENT_SHADER)}else if(n.type=="x-shader/x-vertex"){s=this.gl.createShader(this.gl.VERTEX_SHADER)}else{return null}this.gl.shaderSource(s,r);this.gl.compileShader(s);if(!this.gl.getShaderParameter(s,this.gl.COMPILE_STATUS)){alert(this.gl.getShaderInfoLog(s));return null}return s},this.getShaderFromVar=function(e,t,n){var r;if(n=="Vert"||n=="Vertex"||n=="VertexShader"){r=this.gl.createShader(e.VERTEX_SHADER)}else if(n=="Frag"||n=="Fragment"||n=="FragmentShader"){r=this.gl.createShader(e.FRAGMENT_SHADER)}else{console.log("Error: Cannot get shader. Invalid type provided.");return}this.gl.shaderSource(r,t);this.gl.compileShader(r);if(!this.gl.getShaderParameter(r,this.gl.COMPILE_STATUS)){alert(this.gl.getShaderInfoLog(r));return null}return r},this.createShader=function(e,t,n,r){e=this.gl.createProgram();this.gl.attachShader(e,n);this.gl.attachShader(e,r);this.gl.linkProgram(e);if(!this.gl.getProgramParameter(e,this.gl.LINK_STATUS)){alert("Could not initialise shader: "+e)}this.gl.useProgram(e);if(t==true){this.enableTextureShaderAttribs(e)}else{this.enableRegularShaderAttribs(e)}e.pMatrixUniform=this.gl.getUniformLocation(e,"uPMatrix");e.mvMatrixUniform=this.gl.getUniformLocation(e,"uMVMatrix");return e},this.enableRegularShaderAttribs=function(e){e.vertexPositionAttribute=this.gl.getAttribLocation(e,"aVertexPosition");this.gl.enableVertexAttribArray(e.vertexPositionAttribute);e.vertexColorAttribute=this.gl.getAttribLocation(e,"aVertexColor");this.gl.enableVertexAttribArray(e.vertexColorAttribute)},this.enableTextureShaderAttribs=function(e){e.vertexPositionAttribute=this.gl.getAttribLocation(e,"aVertexPosition");this.gl.enableVertexAttribArray(e.vertexPositionAttribute);e.textureCoordAttribute=this.gl.getAttribLocation(e,"aTextureCoord");this.gl.enableVertexAttribArray(e.textureCoordAttribute)},this.mvPushMatrix=function(){var e=mat4.create();mat4.copy(e,this.mvMatrix);this.mvMatrixStack.push(e)},this.mvPopMatrix=function(){if(this.mvMatrixStack.length==0){throw"Invalid popMatrix!"}this.mvMatrix=this.mvMatrixStack.pop()},this.resize=function(t,n){if(t!=e.width||n!=e.height){e.width=t;e.height=n;mat4.translate(this.mvMatrix,this.mvMatrix,[+this.gl.viewportRatio,+1,0]);this.gl.viewportWidth=t;this.gl.viewportHeight=n;this.gl.viewportRatio=t/n;this.gl.viewport(0,0,this.gl.viewportWidth,this.gl.viewportHeight);mat4.ortho(this.pMatrix,-this.gl.viewportRatio,this.gl.viewportRatio,-1,1,.1,100);mat4.translate(this.mvMatrix,this.mvMatrix,[-this.gl.viewportRatio,-1,0]);this.initBuffers()}}}function degToRad(e){return e*Math.PI/180}function polygonCollision(e,t,n,r,i){var s,o,u=0;for(var s=0,o=e-1;s<e;o=s++){if(n[s]>i!=n[o]>i&&r<(t[o]-t[s])*(i-n[s])/(n[o]-n[s])+t[s])u=!u}return u}function checkScreenBounds(e,t,n,r,i,s){if(i>=e&&i<=e+n&&s>=t&&s<=t+r){return true}else{return false}}var Vector2f={sub:function(e,t){var n={x:e.x-t.x,y:e.y-t.y};return n},add:function(e,t){var n={x:e.x+t.x,y:e.y+t.y};return n},dot:function(e,t){return e.x*t.x+e.y*t.y},equal:function(e,t){if(e.x==t.x&&e.y==t.y){return true}else{return false}}};var pointLightFragShader="precision mediump float;"+"uniform vec2 lightLocation;"+"uniform vec3 lightColor;"+"uniform float screenHeight;"+"void main() {"+"float distance = length(lightLocation - gl_FragCoord.xy);"+"float attenuation = 1.0 / distance;"+"vec4 color = vec4(attenuation, attenuation, attenuation, pow(attenuation, 3.0)) * vec4(lightColor, 1);"+"gl_FragColor = color;"+"}";var mainVertShader="attribute vec3 aVertexPosition;"+"attribute vec4 aVertexColor;"+"uniform mat4 uMVMatrix;"+"uniform mat4 uPMatrix;"+"varying vec4 vColor;"+"void main(void) {"+"gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);"+"vColor = aVertexColor;"+"}";var spotLightFragShader="precision mediump float;"+"uniform vec2 lightLocation;"+"uniform vec3 lightColor;"+"uniform float radius;"+"uniform float screenHeight;"+"void main() {"+"float distance  = length( lightLocation - gl_FragCoord.xy );"+"float intensity = 1.0 - min( distance, radius ) / radius;"+"gl_FragColor = vec4(intensity, intensity, intensity, 0.1) * vec4(lightColor.r / 10.0, lightColor.g / 10.0, lightColor.b / 10.0, 1);"+"}";var colourFragShader="precision mediump float;"+"uniform vec4 ambientLight;"+"varying vec4 vColor;"+"void main(void) {"+"gl_FragColor = ambientLight * vColor;"+"}";var textureFragShader="precision mediump float;"+"varying vec2 vTextureCoord;"+"uniform vec4 ambientLight;"+"uniform sampler2D uSampler;"+"void main(void) {"+"gl_FragColor = ambientLight * texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));"+"}";var textureVertShader="attribute vec3 aVertexPosition;"+"attribute vec2 aTextureCoord;"+"uniform mat4 uMVMatrix;"+"uniform mat4 uPMatrix;"+"varying vec2 vTextureCoord;"+"void main(void) {"+"gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);"+"vTextureCoord = aTextureCoord;"+"}"